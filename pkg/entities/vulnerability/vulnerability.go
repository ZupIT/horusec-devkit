// Copyright 2020 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package vulnerability

import (
	"github.com/google/uuid"

	"github.com/ZupIT/horusec-devkit/pkg/enums/confidence"
	"github.com/ZupIT/horusec-devkit/pkg/enums/languages"
	"github.com/ZupIT/horusec-devkit/pkg/enums/severities"
	"github.com/ZupIT/horusec-devkit/pkg/enums/tools"
	"github.com/ZupIT/horusec-devkit/pkg/enums/vulnerability"
)

// Vulnerability this struct represents a possible vulnerability and contains all necessary data to identify it.
// TODO: The fields CWEs, CVEs, Mitigation, Reference, SafeExample, UnsafeExample are going to be ignored until we
// start to fill the data into the engine rules. After completed it's necessary to add then into the json notation.
//nolint:lll // notations need more than 130 characters
type Vulnerability struct {
	VulnerabilityID uuid.UUID             `json:"vulnerabilityID" gorm:"Column:vulnerability_id" example:"00000000-0000-0000-0000-000000000000"`
	Line            string                `json:"line" gorm:"Column:line" example:"1"`
	Column          string                `json:"column" gorm:"Column:column" example:"1"`
	Confidence      confidence.Confidence `json:"confidence" gorm:"Column:confidence" example:"HIGH" enums:"HIGH,MEDIUM,LOW"`
	File            string                `json:"file" gorm:"Column:file" example:"/deployments/cert.pem"`
	Code            string                `json:"code" gorm:"Column:code" example:"-----BEGIN RSA PRIVATE KEY-----"`
	Details         string                `json:"details" gorm:"Column:details" example:"Asymmetric Private Key Found SSH and/or x.509 Cerficates among the files of your project, make sure you want this kind of information inside your Git repo, since it can be missused by someone with access to any kind of copy.  For more information checkout the CWE-312 (https://cwe.mitre.org/data/definitions/312.html) advisory."`
	SecurityTool    tools.Tool            `json:"securityTool" gorm:"Column:security_tool" example:"HorusecEngine" enums:"HorusecEngine,GoSec,SecurityCodeScan,Brakeman,Safety,Bandit,NpmAudit,YarnAudit,GitLeaks,TfSec,Semgrep,Flawfinder,PhpCS,MixAudit,Sobelow,ShellCheck,BundlerAudit"`
	Language        languages.Language    `json:"language" gorm:"Column:language" example:"Leaks" enums:"Go,C#,Dart,Ruby,Python,Java,Kotlin,Javascript,Typescript,Leaks,HCL,C,PHP,HTML,Generic,YAML,Elixir,Shell,Nginx"`
	Severity        severities.Severity   `json:"severity" gorm:"Column:severity" example:"CRITICAL" enums:"CRITICAL, HIGH, MEDIUM, LOW, INFO"`
	Type            vulnerability.Type    `json:"type" gorm:"Column:type" example:"Vulnerability" enums:"Vulnerability, Risk Accepted, False Positive, Corrected"`

	CWEs          []string `json:"-" gorm:"-" example:"[\"https://cwe.mitre.org/data/definitions/000.html\"]"`
	CVEs          []string `json:"-" gorm:"-" example:"[\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-0000-00000\"]"`
	Mitigation    string   `json:"-" gorm:"-" example:"Use a secret manager or environment variable"`
	Reference     string   `json:"-" gorm:"-" example:"https://example.com"`
	SafeExample   string   `json:"-" gorm:"-" example:"setPassword(env.get(\"HORUSEC_PASSWORD\"))"`
	UnsafeExample string   `json:"-" gorm:"-" example:"setPassword(\"s@f3P@a$$w0rd\")"`
	CommitAuthor  string   `json:"commitAuthor" gorm:"Column:commit_author" example:"horusec"`
	CommitEmail   string   `json:"commitEmail" gorm:"Column:commit_email" example:"horusec@zup.com.br"`
	CommitHash    string   `json:"commitHash" gorm:"Column:commit_hash" example:"a21fa164c00a15f3e91f5ee6659cb6a793b39a8d"`
	CommitMessage string   `json:"commitMessage" gorm:"Column:commit_message" example:"Initial commit"`
	CommitDate    string   `json:"commitDate" gorm:"Column:commit_date" example:"2021-12-30"`

	// RuleID is the rule id used to generate Vulnerability.
	// This field can bem empty if Vulnerability was not generated from horusec-engine.
	RuleID string `json:"rule_id" gorm:"-"`

	// VulnHash is the vulnerability hash
	VulnHash string `json:"vulnHash" gorm:"Column:vuln_hash" example:"8bcac7908eb950419537b91e19adc83ce2c9cbfdacf4f81157fdadfec11f7017"`

	// DeprecatedHashes contains some hashes generated in different versions and in different ways, but which are
	// still valid. This field exists only to avoid breaking changes to the users and will be removed in a future
	// release. Until then, when a hash of this field is identified, an alert will be displayed to the user so
	// that he can change this hash to the updated one, which is in the VulnHash field
	// TODO: This will be removed after the release v2.10.0 of the Horusec CLI be released.
	DeprecatedHashes []string `json:"deprecatedHashes" gorm:"-" example:""`

	SecurityToolVersion string `json:"securityToolVersion" gorm:"-"`
	SecurityToolInfoURI string `json:"securityToolInfoUri" gorm:"-"`
}

func (v *Vulnerability) GetTable() string {
	return "vulnerabilities"
}

func (v *Vulnerability) GenerateID() {
	v.VulnerabilityID = uuid.New()
}

func (v *Vulnerability) SetType(vulnType vulnerability.Type) {
	if vulnType != "" {
		v.Type = vulnType
	} else {
		v.Type = vulnerability.Vulnerability
	}
}

func (v *Vulnerability) SetSeverity(severity severities.Severity) {
	v.Severity = severity
}
