// Copyright 2020 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package vulnerability

import (
	"testing"

	"github.com/google/uuid"
	"github.com/stretchr/testify/assert"

	"github.com/ZupIT/horusec-devkit/pkg/enums/severities"
	vulnerabilityEnum "github.com/ZupIT/horusec-devkit/pkg/enums/vulnerability"
)

func TestGetTable(t *testing.T) {
	t.Run("should return vulnerability database table name", func(t *testing.T) {
		vulnerability := &Vulnerability{}
		assert.Equal(t, "vulnerabilities", vulnerability.GetTable())
	})
}

func TestGenerateID(t *testing.T) {
	t.Run("should success generate vulnerability id", func(t *testing.T) {
		vulnerability := &Vulnerability{}

		vulnerability.GenerateID()
		assert.NotEqual(t, uuid.Nil, vulnerability.VulnerabilityID)
	})
}

func TestSetType(t *testing.T) {
	t.Run("should success set type with arguments", func(t *testing.T) {
		vulnerability := &Vulnerability{Type: vulnerabilityEnum.Vulnerability}

		vulnerability.SetType(vulnerabilityEnum.RiskAccepted)
		assert.Equal(t, vulnerabilityEnum.RiskAccepted, vulnerability.Type)
	})

	t.Run("should set type as vulnerability when no arguments", func(t *testing.T) {
		vulnerability := &Vulnerability{Type: vulnerabilityEnum.FalsePositive}

		vulnerability.SetType("")
		assert.Equal(t, vulnerabilityEnum.Vulnerability, vulnerability.Type)
	})
}

func TestSetSeverity(t *testing.T) {
	t.Run("should success change severity", func(t *testing.T) {
		vulnerability := &Vulnerability{Severity: severities.Critical}

		vulnerability.SetSeverity(severities.High)
		assert.Equal(t, severities.High, vulnerability.Severity)
	})
}
